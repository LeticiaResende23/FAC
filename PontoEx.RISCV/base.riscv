.data
    input_string: .space 34
    string_base32: .space 256
    BASE32: .string "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
.text

main:
    # Read input string
    li a7, 8
    la a0, input_string
    li a2, 34
    ecall

    # Calculate length of input string
    jal calc_input_length

    # Check if input length is valid
    rem t1, t0, t5
    bnez t1, invalid_input

    # Convert input string to Base32
    jal convert_to_base32

    # Print result
    jal print_result

end:
    li a7, 10
    ecall

invalid_input:
    li a0, -1
    li a7, 11
    ecall
    j end

calc_input_length:
    # Calculate length of input string
    li t0, 0

calc_loop:

    la t0, input_string
    lb t1, 0(t0)
    beqz t1, calc_end
    addi t0, t0, 1
    j calc_loop

calc_end:
    jr ra

convert_to_base32:
    # Convert input string to Base32 representation
    li t1, 0
    li t2, 0

convert_loop:
    lbu t3, (t2)
    sll t3, t3, t1 
    or t4, t4, t3
    addi t1, t1, 1
    addi t2, t2, 1
    rem t5, t2, t5
    bnez t5, convert_loop

convert_group:
    li t5, 4

group_loop:
    andi t6, t4, 31
    srl t4, t4, t5
    sb t6,(t3)
    
    addi t3,t3,-1    
    addi t5,t5,-1    
    bnez t5 ,group_loop
    
    addi sp ,sp ,-4    
    sw ra ,0(sp)    
    li a0 ,'\n'    
    li a7 ,11    
    ecall    
    lw ra ,0(sp)    
    addi sp ,sp ,4    

    j convert_loop
    
print_result:
# Print result in Base32 representation 
    li a7 ,11 
    li s0 ,0 
    li s1 ,51 

print_loop: 
    lb s2 ,(s1) 
    lui s3, %hi(BASE32)
    addi s3, s3, %lo(BASE32)
    add s3, s3, s2
    
    lb a0 , 0(s3) 
    ecall 
    addi s0, s0, -1 
    addi s1, s1, -1 
    bgez s0 , print_loop 

    jr ra 
