.data
	pulaLinha: .asciiz "\n"
	pos: .asciiz "+\n"
	negt: .asciiz "-\n"
	string1: .asciiz "0x"
	hexaFinal: .space 8
.text

main:

	li $v0, 6 # chama a funcao de leitura de float
    	syscall
	mfc1 $t0, $f0 		
	li $v0, 2 # chama a funcao de impressao de float
    	mov.s $f12, $f0 # move o valor de f0 para f12
    	syscall 		
	
	li $v0, 4 # chama a funsao printStr
    	la $a0, pulaLinha # move o valor de novaLinha para a0
    	syscall  
	
	addi $t1, $zero, 1 # soma o valor 1 em t1
	sll  $t1, $t1, 31	
	and  $a0, $t0, $t1	
	srl  $a0, $a0, 31	
	move $t2, $a0		
	
	beqz $t2, printPos	
	beq  $t2, 1, printNeg	
	
	li $v0, 4 # chama a funcao printStr
    	la $a0, pos # move o valor de novaLinha para a0
    	syscall # imprime a0 (quebra a linha)
	
printPos:

	li $v0, 4 # chama a funcao printStr
	la $a0, pos		
	syscall

	j expo	

printNeg:

	li $v0, 4 # chama a funcao printStr
	la $a0, negt		
	syscall

	j expo # vai para a funcao expoente

expo:

	addi $t2, $zero, 255	
	sll  $t2, $t2, 23	
	and  $a0, $t2, $t0	
	srl  $a0, $a0, 23 	
	addi $t3, $zero, 127	
	sub  $a0, $a0, $t3	# a0 = a0 - t3
	
	li $v0, 1		# chama funcao de imprimir inteiro
	syscall
	
	li $v0, 4 		# chama a funcao printStr
    	la $a0, pulaLinha 	# move o valor de novaLinha para a0
    	syscall 		# imprime a0 (quebra a linha)
    	
    	li $v0, 4		# cahama a funcao printStr
    	la $a0, string1		
    	syscall
	
	mul  $t2, $t2, $zero		
	ori $t2, $zero, 0xffff		
	sll  $t2, $t2, 7		
	ori $t2, $t2, 0x7f		
	and  $a0, $t0, $t2		
	jal parsHexa
	
	li $v0, 4 # chama a funcao printStr
    	la $a0, pulaLinha 	
    	syscall 		
	
	li $v0, 10
	syscall	

parsHexa:
	addi $sp, $sp, -24 # alocando o espaco de 6 palavras no stack
	sw   $a0, 0($sp)
    	sw   $s0, 4($sp)
    	sw   $s1, 8($sp)
    	sw   $s2, 12($sp)
    	sw   $s3, 16($sp)
    	sw   $s4, 20($sp)
	move $s2, $a0	# move o conteudo de a0 para s2
	addi $s0, $s0, 8 # iniciando o contador em 8
	la   $s3, hexaFinal	
	
hexaLoop:

	rol  $s2, $s2, 4	
	and  $s1, $s2, 0xf	
	ble  $s1, 9, printHex	
	addi $s1, $s1, 7	
	
printHex:

	addi $s1, $s1, 48	
	sb   $s1, ($s3)		
	addi $s3, $s3, 1	
	addi $s0, $s0, -1	
	bnez $s0, hexaLoop	
	li $v0, 4		
	la $a0, hexaFinal	
	syscall
	jr $ra	
	syscall